% Trifocal point case for point-tangent ids 689 2086 4968
% TODO: make pre-tests to make sure these points are far from degenerate
% Indexing is eg x{view}{point}{coordinate}

% INPUT data: 3 points and tangents vs 3 views
constant d111, d112, d113, d121, d122, d123, d131, d132, d133, d211, d212, d213, d221, d222, d223, d231, d232, d233, d311, d312, d313, d321, d322, d323, d331, d332, d333;

constant x111, x112, x113, x121, x122, x123, x131, x132, x133, x211, x212, x213, x221, x222, x223, x231, x232, x233, x311, x312, x313, x321, x322, x323, x331, x332, x333;

% Set these inputs: 
% scilab: x_1(:,selected_point_ids(1))

% 2D points
x111 = -0.01609589159371727;
x112 = 0.0861548623366261;
x113 = 1:

x121 = -0.01421529931862033;
x122 = 0.15164819506961155;
x123 = 1;

x131 = 0.0155829286858466;
x132 = 0.12352302780175817;
x133 = 1;

x211 = 0.01389192462875502;
x212 = 0.08595606183440178;
x213 = 1;

x221 = 0.0137394337121674;
x222 = 0.1515915437407269;
x223 = 1;

x231 = 0.02520938938602093;
x232 = 0.12793300445393241;
x233 = 1;

x311 = 0.03177299989757976;
x312 = 0.08899413323286663;
x313 = 1;

x321 = 0.03004852302129869;
x322 = 0.15543598064788686;
x323 = 1;

x331 = 0.02150970592535596;
x332 = 0.13169055919273559;
x333 = 1:

% 2D tangents
d111 = -0.99976604030148530;
d112 =  0.02163017937717566;
d113 = 0:

d121 = -0.50501558422258452;
d122 = 0.86311022453237207;
d123 = 0;

d131 = 0.84527432543442571;
d132 = 0.53433258815215101;
d133 = 0;

d211 = -0.98403013199840228;
d212 = -0.17800196436895521;
d213 = 0;

d221 = -0.66441382731888809;
d222 = 0.74736488147856317;
d223 = 0;

d231 = 0.12983973507180230;
d232 = 0.9915349934301281;
d233 = 0;

d311 = -0.76441102950503936;
d312 = -0.64472922841379376;
d313 = 0;

d321 = -0.60850011628612388;
d322 = 0.79355378423883394;
d323 = 0;

d331 = -0.6885391914692284;
d332 = 0.72519913252216561;
d333 = 0:


% Variables
% Translation and depths are a homogeneous group in each eq
%
% -------------------
% Point Equations
% First set of three equations from the first vector point equation (*) above
%% Point 1
hom_variable_group a11, a21, t21, % TODO: eliminate dups
                   a11, a21, t22,
                   a11, a21, t23,
%% Point 2
a12, a22, t21,
a12, a22, t22,
a12, a22, t23,

%% Point 3
a13, a23, t21,
a13, a23, t22,
a13, a23, t23,

% Second set of three equations per point from (*) above
%% Point 1,
a11, a31, t31,
a11, a31, t32,
a11, a31, t33,

%% Point 2,
a12, a32, t31,
a12, a32, t32,
a12, a32, t33,

%% Point 3,
a13, a33, t31,
a13, a33, t32,
a13, a33, t33;

% Rotations
% try different parametrizations for rotations. Lets try standard

variable_group 
r211, r212, r213,
r221, r222, r223,
r231, r232, r233,

r311, r312, r313,
r321, r322, r323,
r331, r332, r333;
% ---------------------------------------------------------------------

% Point equations (18 eqs = 6 eqs x 3 points)
%  a(2,p)*x_2(:,p) - a(1,p)*R_2*x_1(:,p) - t_2 // (*)
% or
%  a(2,p)*x_2(:,p) - t_2 - a(1,p)*R_2*x_1(:,p) // (view 2, from 1 *)
%  a(3,p)*x_3(:,p) - t_3 - a(1,p)*R_3*x_1(:,p) // (view 3, from 1 **)

function 
pt_eq211,
pt_eq212,
pt_eq213,

% Point equation (*), point 2
pt_eq221,
pt_eq222,
pt_eq223,

% Point equation (*), point 3
pt_eq231,
pt_eq232,
pt_eq233,

% Point equation views 1 and 3 (*), point 1

% pt_eq{view}{point}{coordinate}
pt_eq311,
pt_eq312,
pt_eq313,

% Point equation (**), point 2
pt_eq321,
pt_eq322,
pt_eq323,

% Point equation (**), point 3
pt_eq331,
pt_eq332,
pt_eq333;

%%%%%%%%%%%%%%%
% Point equation for view 2 (*), point 1

% pt_eq{view}{point}{coordinate}
pt_eq211 = a21*x211 - t21 + a11*r211*x111 + a11*r212*x112 + a11*r213*x113;
pt_eq212 = a21*x212 - t22 + a11*r221*x111 + a11*r222*x112 + a11*r223*x113;
pt_eq213 = a21*x213 - t23 + a11*r231*x111 + a11*r232*x112 + a11*r233*x113;

% Point equation (*), point 2
pt_eq221 = a22*x221 - t21 + a12*r211*x121 + a12*r212*x122 + a12*r213*x123;
pt_eq222 = a22*x222 - t22 + a12*r221*x121 + a12*r222*x122 + a12*r223*x123;
pt_eq223 = a22*x223 - t23 + a12*r231*x121 + a12*r232*x122 + a12*r233*x123;

% Point equation (*), point 3
pt_eq231 = a23*x231 - t21 + a13*r211*x131 + a13*r212*x132 + a13*r213*x133;
pt_eq232 = a23*x232 - t22 + a13*r221*x131 + a13*r222*x132 + a13*r223*x133;
pt_eq233 = a23*x233 - t23 + a13*r231*x131 + a13*r232*x132 + a13*r233*x133;

% Point equation views 1 and 3 (*), point 1

% pt_eq{view}{point}{coordinate}
pt_eq311 = a31*x311 - t31 + a11*r311*x111 + a11*r312*x112 + a11*r313*x113;
pt_eq312 = a31*x312 - t32 + a11*r321*x111 + a11*r322*x112 + a11*r323*x113;
pt_eq313 = a31*x313 - t33 + a11*r331*x111 + a11*r332*x112 + a11*r333*x113;

% Point equation (**), point 2
pt_eq321 = a32*x321 - t31 + a12*r311*x121 + a12*r312*x122 + a12*r313*x123;
pt_eq322 = a32*x322 - t32 + a12*r321*x121 + a12*r322*x122 + a12*r323*x123;
pt_eq323 = a32*x323 - t33 + a12*r331*x121 + a12*r332*x122 + a12*r333*x123;

% Point equation (**), point 3
pt_eq331 = a33*x331 - t31 + a13*r311*x131 + a13*r312*x132 + a13*r313*x133;
pt_eq332 = a33*x332 - t32 + a13*r321*x131 + a13*r322*x132 + a13*r323*x133;
pt_eq333 = a33*x333 - t33 + a13*r331*x131 + a13*r332*x132 + a13*r333*x133;

% ---------------------------------------------------------------------


