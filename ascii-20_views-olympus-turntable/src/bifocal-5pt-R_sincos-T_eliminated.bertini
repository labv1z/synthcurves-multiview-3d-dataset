%
% AUTHORS
%   Ricardo Fabbri  rfabbri@gmail.com - initial author
%
% Bifocal 5 point algorithm with 3 rotation equations (eliminated T)
%    - point-tangent ids from synthetic data: 689 2086 4968 1029 3050
%    - views 3 11
%
% Implements exactly three point equations for 2 views, using sines and cosines
% for rotation 
%
% Point equations (matlab notation), eliminated translation:
% det([cross(x2(:,selected_point_ids(1)), R2*x1(:,selected_point_ids(1))) cross(x2(:,selected_point_ids(2)), R2*x1(:,selected_point_ids(2))) cross(x2(:,selected_point_ids(3)), R2*x1(:,selected_point_ids(3)))])
%
% See synthdata_bifocal.sce for a test of the equations with
% numeric synthetic data (these equations are a subset of the trifocal ones in
% that file)
%
% TODO: make pre-tests to make sure these points are far from degenerate
% Indexing is eg x{view}{point}{coordinate}

%------------------------------
% Uncomment for evaluating on ground truth points to test if 0
% Call as:  bertini <this_file.bertini> <this_file.groundtruth>
% Shortcut  bertini this_file*
%CONFIG
%  TrackType:-4;
%  MPType:1;
%  Precision:128;
%END;
%------------------------------

INPUT 
%data: 5 points vs 2 views

constant 
x111, 
x112, 

x121, 
x122, 

x131, 
x132, 

x141, 
x142, 

x151, 
x152, 

% --
x211, 
x212, 

x221, 
x222, 

x231, 
x232, 

x241, 
x242, 

x251, 
x252; 

% Set these inputs: 
% scilab: x1(:,selected_point_ids) and so on

% 2D points
x111 = -0.01609589159371727;
x112 = 0.0861548623366261;
x113 = 1;

x121 = -0.01421529931862033;
x122 = 0.15164819506961155;
x123 = 1;

x131 = 0.0155829286858466;
x132 = 0.12352302780175817;
x133 = 1;

x141 = -0.03320020825462477;
x142 = 0.10476505027301419;
x143 = 1;

x151 = -0.03303093347154548;
x152 = 0.17601166665337448;
x153 = 1;

x211 = 0.01389192462875502;
x212 = 0.08595606183440178;
x213 = 1;

x221 = 0.0137394337121674;
x222 = 0.1515915437407269;
x223 = 1;

x231 = 0.02520938938602093;
x232 = 0.12793300445393241;
x233 = 1;

x241 = -0.05082082707844703;
x242 = 0.09656145335622426;
x243 = 1;

x251 = -0.03967228910752616;
x252 = 0.1666555715894824;
x253 = 1;


% Variables
%
% Rotations
% try different parametrizations for rotations. Lets try Euler
% trying a direct straight line program for now, without multiplying out.
% TODO compare to hongy's expanded version.

variable_group
c1, s1, c2, s2, c3, s3;

r211 = c1*c2;
r212 = c1*s2*s3 - c3*s1;
r213 = s1*s3 + c1*c3*s2;
r221 = c2*s1;
r222 = c1*c3 + s1*s2*s3;
r223 = c3*s1*s2 - c1*s3;
r231 = -s2;
r232 = c2*s3;
r233 = c2*c3;

% ---------------------------------------------------------------------
% Point constraints

% -------- View 2
% Point 1

% matrix multiplications
R2x111 = r211*x111 + r212*x112 + r213*x113;
R2x112 = r221*x111 + r222*x112 + r223*x113;
R2x113 = r231*x111 + r232*x112 + r233*x113;

R2x121 = r211*x121 + r212*x122 + r213*x123;
R2x122 = r221*x121 + r222*x122 + r223*x123;
R2x123 = r231*x121 + r232*x122 + r233*x123;

R2x131 = r211*x131 + r212*x132 + r213*x133;
R2x132 = r221*x131 + r222*x132 + r223*x133;
R2x133 = r231*x131 + r232*x132 + r233*x133;

R2x141 = r211*x141 + r212*x142 + r213*x143;
R2x142 = r221*x141 + r222*x142 + r223*x143;
R2x143 = r231*x141 + r232*x142 + r233*x143;

R2x151 = r211*x151 + r212*x152 + r213*x153;
R2x152 = r221*x151 + r222*x152 + r223*x153;
R2x153 = r231*x151 + r232*x152 + r233*x153;

% cross products for det 1
x21crossR2x11_1 = x212*R2x113 - x213*R2x112;
x21crossR2x11_2 = x213*R2x111 - x211*R2x113;
x21crossR2x11_3 = x211*R2x112 - x212*R2x111;

x22crossR2x12_1 = x222*R2x123 - x223*R2x122;
x22crossR2x12_2 = x223*R2x121 - x221*R2x123;
x22crossR2x12_3 = x221*R2x122 - x222*R2x121;

x23crossR2x13_1 = x232*R2x133 - x233*R2x132;
x23crossR2x13_2 = x233*R2x131 - x231*R2x133;
x23crossR2x13_3 = x231*R2x132 - x232*R2x131;

% cross products for det 2
x24crossR2x14_1 = x242*R2x143 - x243*R2x142;
x24crossR2x14_2 = x243*R2x141 - x241*R2x143;
x24crossR2x14_3 = x241*R2x142 - x242*R2x141;

% cross products for det 3
x25crossR2x15_1 = x252*R2x153 - x253*R2x152;
x25crossR2x15_2 = x253*R2x151 - x251*R2x153;
x25crossR2x15_3 = x251*R2x152 - x252*R2x151;

% TODO: run this into a computer algebra system to see if it cancels out
% Tim may have a lower-degree expression.
% I am doing this directly because it is the way the equations are written out.
% If terms cancel, the numerical package should see the right degree;
% so it would only make some calculations unecessary. But, then, I don't want to
% break straightline structure that much.
%
% It is worth doing different ways to check, as well.

% epipolar constraint without translation

% Lets call each determinant constraint the matrix
%
%  c11 c12 c13
%  c21 c22 c23
%  cp1 cp2 cp3
% where we vary p as 3, 4, 5
%

c11 = x21crossR2x11_1;
c12 = x21crossR2x11_2;
c13 = x21crossR2x11_3;

c21 = x22crossR2x12_1;
c22 = x22crossR2x12_2;
c23 = x22crossR2x12_3;

c31 = x23crossR2x13_1;
c32 = x23crossR2x13_2;
c33 = x23crossR2x13_3;

c41 = x24crossR2x14_1;
c42 = x24crossR2x14_2;
c43 = x24crossR2x14_3;

c51 = x25crossR2x15_1;
c52 = x25crossR2x15_2;
c53 = x25crossR2x15_3;

% These cofactors are shared:
cofactor1 = c12*c23 - c13*c22;
cofactor2 = c13*c21 - c11*c23;
cofactor3 = c11*c22 - c21*c12;

function ptdet123, ptdet124, ptdet125;

% 3 dets: points 1,2,3, 1,2,4, 1,2,5
ptdet123 = c31*cofactor1 + c32*cofactor2 + c33*cofactor3;
ptdet124 = c41*cofactor1 + c42*cofactor2 + c43*cofactor3;
ptdet125 = c51*cofactor1 + c52*cofactor2 + c53*cofactor3;

% ---------------------------------------------------------------------
% Rotation constraints

function RFN1, RFN2, RFN3;

RFN1 = c1*c1 + s1*s1 - 1;
RFN2 = c2*c2 + s2*s2 - 1;
RFN3 = c3*c3 + s3*s3 - 1;
END;
