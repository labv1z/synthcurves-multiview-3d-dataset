
% AUTHORS
%   Ricardo Fabbri  rfabbri@gmail.com - initial author
%
% 5pt problem study, point only
%    - point ids 689 2086 4968
%    - views 3 11
%
% Implements exactly the point equations without eliminationk,
% for 2 views, with the 1st view as the reference/world coordinates.
%
% Point equations (matlab notation):
%    a(2,p)*x_2(:,p) - a(1,p)*R_2*x_1(:,p) - t_2 // (*)  views 2,1 ptfn2p*
% p ranging from 1 to 5

% TODO: make pre-tests to make sure these ground truth points are far from degenerate
% Indexing is eg x{view}{point}{coordinate}

%------------------------------
% Uncomment for evaluating on ground truth points to test if 0
% Call as:  bertini <this_file.bertini> <this_file.groundtruth>
% Shortcut  bertini this_file*
% CONFIG
%   TrackType:-4;
%   MPType:1;
%   Precision:128;
% END;
%------------------------------

INPUT 

constant 
x111, 
x112, 

x121, 
x122, 

x131, 
x132, 

x141, 
x142, 

x151, 
x152, 

% --
x211, 
x212, 

x221, 
x222, 

x231, 
x232, 

x241, 
x242, 

x251, 
x252; 


% Set these inputs: 
% scilab: x1(:,selected_point_ids) and so on

% 2D points
x111 = -0.01609589159371727;
x112 = 0.0861548623366261;

x121 = -0.01421529931862033;
x122 = 0.15164819506961155;

x131 = 0.0155829286858466;
x132 = 0.12352302780175817;

x141 = -0.03320020825462477;
x142 = 0.10476505027301419;

x151 = -0.03303093347154548;
x152 = 0.17601166665337448;

x211 = 0.01389192462875502;
x212 = 0.08595606183440178;

x221 = 0.0137394337121674;
x222 = 0.1515915437407269;

x231 = 0.02520938938602093;
x232 = 0.12793300445393241;

x241 = -0.05082082707844703;
x242 = 0.09656145335622426;

x251 = -0.03967228910752616;
x252 = 0.1666555715894824;


variable_group
c1, s1, c2, s2,
c3, s3,
c4, s4,
c5, s5;

function
E1, E2, E3, E4, E5;


E1 = -x112*c1*c3*c4*c5 +x212*c2*c3*c4*c5 -x212*x111*c4*c5*s2 -x212*x111*c1*c2*s4 +x112*x211*c1*c3*s4 -x112*x211*c2*c4*s3*s5 -x112*c4*c5*s1*s3*s2 +x112*c1*c4*s3*s5*s2 -x212*c1*c3*s4*s2 -x112*x212*c1*s3*s4*s2 -x112*c3*c4*s1*s5 +x112*x212*c2*c4*c5*s3 +x112*x212*c3*s1*s4 +x211*c3*s1*s4*s2 +x111*x211*c4*s5*s2 -x111*c2*c4*c5*s1 +x111*c1*c2*c4*s5 -x211*c1*s3*s4 -x211*c2*c3*c4*s5 +x111*x211*c2*s1*s4 -c3*c4*c5*s1*s2 +c1*c3*c4*s5*s2 +c1*c4*c5*s3 +c4*s1*s3*s5 +x112*x211*s1*s3*s4*s2 -x212*s1*s3*s4;
E2 = -x122*c1*c3*c4*c5 +x222*c2*c3*c4*c5 -x222*x121*c4*c5*s2 -x222*x121*c1*c2*s4 +x122*x221*c1*c3*s4 -x122*x221*c2*c4*s3*s5 -x122*c4*c5*s1*s3*s2 +x122*c1*c4*s3*s5*s2 -x222*c1*c3*s4*s2 -x122*x222*c1*s3*s4*s2 -x122*c3*c4*s1*s5 +x122*x222*c2*c4*c5*s3 +x122*x222*c3*s1*s4 +x221*c3*s1*s4*s2 +x121*x221*c4*s5*s2 -x121*c2*c4*c5*s1 +x121*c1*c2*c4*s5 -x221*c1*s3*s4 -x221*c2*c3*c4*s5 +x121*x221*c2*s1*s4 -c3*c4*c5*s1*s2 +c1*c3*c4*s5*s2 +c1*c4*c5*s3 +c4*s1*s3*s5 +x122*x221*s1*s3*s4*s2 -x222*s1*s3*s4;
E3 = -x132*c1*c3*c4*c5 +x232*c2*c3*c4*c5 -x232*x131*c4*c5*s2 -x232*x131*c1*c2*s4 +x132*x231*c1*c3*s4 -x132*x231*c2*c4*s3*s5 -x132*c4*c5*s1*s3*s2 +x132*c1*c4*s3*s5*s2 -x232*c1*c3*s4*s2 -x132*x232*c1*s3*s4*s2 -x132*c3*c4*s1*s5 +x132*x232*c2*c4*c5*s3 +x132*x232*c3*s1*s4 +x231*c3*s1*s4*s2 +x131*x231*c4*s5*s2 -x131*c2*c4*c5*s1 +x131*c1*c2*c4*s5 -x231*c1*s3*s4 -x231*c2*c3*c4*s5 +x131*x231*c2*s1*s4 -c3*c4*c5*s1*s2 +c1*c3*c4*s5*s2 +c1*c4*c5*s3 +c4*s1*s3*s5 +x132*x231*s1*s3*s4*s2 -x232*s1*s3*s4;
E4 = -x142*c1*c3*c4*c5 +x242*c2*c3*c4*c5 -x242*x141*c4*c5*s2 -x242*x141*c1*c2*s4 +x142*x241*c1*c3*s4 -x142*x241*c2*c4*s3*s5 -x142*c4*c5*s1*s3*s2 +x142*c1*c4*s3*s5*s2 -x242*c1*c3*s4*s2 -x142*x242*c1*s3*s4*s2 -x142*c3*c4*s1*s5 +x142*x242*c2*c4*c5*s3 +x142*x242*c3*s1*s4 +x241*c3*s1*s4*s2 +x141*x241*c4*s5*s2 -x141*c2*c4*c5*s1 +x141*c1*c2*c4*s5 -x241*c1*s3*s4 -x241*c2*c3*c4*s5 +x141*x241*c2*s1*s4 -c3*c4*c5*s1*s2 +c1*c3*c4*s5*s2 +c1*c4*c5*s3 +c4*s1*s3*s5 +x142*x241*s1*s3*s4*s2 -x242*s1*s3*s4;
E5 = -x152*c1*c3*c4*c5 +x252*c2*c3*c4*c5 -x252*x151*c4*c5*s2 -x252*x151*c1*c2*s4 +x152*x251*c1*c3*s4 -x152*x251*c2*c4*s3*s5 -x152*c4*c5*s1*s3*s2 +x152*c1*c4*s3*s5*s2 -x252*c1*c3*s4*s2 -x152*x252*c1*s3*s4*s2 -x152*c3*c4*s1*s5 +x152*x252*c2*c4*c5*s3 +x152*x252*c3*s1*s4 +x251*c3*s1*s4*s2 +x151*x251*c4*s5*s2 -x151*c2*c4*c5*s1 +x151*c1*c2*c4*s5 -x251*c1*s3*s4 -x251*c2*c3*c4*s5 +x151*x251*c2*s1*s4 -c3*c4*c5*s1*s2 +c1*c3*c4*s5*s2 +c1*c4*c5*s3 +c4*s1*s3*s5 +x152*x251*s1*s3*s4*s2 -x252*s1*s3*s4;

function
RFN1,
RFN2,
RFN3,
RFN4,
RFN5;

RFN1 = c1*c1 + s1*s1 - 1;
RFN2 = c2*c2 + s2*s2 - 1;
RFN3 = c3*c3 + s3*s3 - 1;
RFN4 = c4*c4 + s4*s4 - 1;
RFN5 = c5*c5 + s5*s5 - 1;
