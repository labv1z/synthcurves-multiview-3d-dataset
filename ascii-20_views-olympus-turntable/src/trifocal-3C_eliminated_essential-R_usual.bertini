% AUTHORS
%   Ricardo Fabbri  rfabbri@gmail.com - initial author
%
% Trifocal point-tangent
%    - point-tangent ids 689 2086 4968
%    - views 3 11 17
%
% Implements exactly the point and tangent equations for 3 views, with the 1st
% view as the reference/world coordinates 
%
% Point equations (matlab notation):
%    a(2,p)*x_2(:,p) - a(1,p)*R_2*x_1(:,p) - t_2 // (*)  views 2,1 ptfn2p*
%    a(3,p)*x_3(:,p) - a(1,p)*R_3*x_1(:,p) - t_3 // (**) views 3,1 ptfn3p*

% Tangent equations
%    e_2*x_2(:,p) + m_2*d_2(:,p) - R_2*(e_1*x_1(:,p) + m_1*d_1(:,p)) // (***)  views 2,1 tgfn2p*
%    e_3*x_3(:,p) + m_3*d_3(:,p) - R_3*(e_1*x_1(:,p) + m_1*d_1(:,p)) // (****) views 3,1 tgfn3p*
%    where e_v = e_v(p), and also m_v
%
% See synthdata_trifocal_simpler_notation.sce for a test of the equations with
% numeric synthetic data
%
% TODO: make pre-tests to make sure these points are far from degenerate
% Indexing is eg x{view}{point}{coordinate}

%------------------------------
% Uncomment for evaluating on ground truth points to test if 0
% Call as:  bertini <this_file.bertini> <this_file.groundtruth>
% Shortcut  bertini this_file*
CONFIG
  TrackType:-4;
  MPType:1;
  Precision:128;
END;
%------------------------------

INPUT 
%data: 3 points and tangents vs 3 views
constant d111, d112, d113, d121, d122, d123, d131, d132, d133, d211, d212, d213, d221, d222, d223, d231, d232, d233, d311, d312, d313, d321, d322, d323, d331, d332, d333;

constant x111, x112, x113, x121, x122, x123, x131, x132, x133, x211, x212, x213, x221, x222, x223, x231, x232, x233, x311, x312, x313, x321, x322, x323, x331, x332, x333;

% Set these inputs: 
% scilab: x1(:,selected_point_ids) and so on

% 2D points
x111 = -0.01609589159371727;
x112 = 0.0861548623366261;
x113 = 1;

x121 = -0.01421529931862033;
x122 = 0.15164819506961155;
x123 = 1;

x131 = 0.0155829286858466;
x132 = 0.12352302780175817;
x133 = 1;

x211 = 0.01389192462875502;
x212 = 0.08595606183440178;
x213 = 1;

x221 = 0.0137394337121674;
x222 = 0.1515915437407269;
x223 = 1;

x231 = 0.02520938938602093;
x232 = 0.12793300445393241;
x233 = 1;

x311 = 0.03177299989757976;
x312 = 0.08899413323286663;
x313 = 1;

x321 = 0.03004852302129869;
x322 = 0.15543598064788686;
x323 = 1;

x331 = 0.02150970592535596;
x332 = 0.13169055919273559;
x333 = 1;

% 2D tangents
d111 = -0.99976604030148530;
d112 =  0.02163017937717566;
d113 = 0;

d121 = -0.50501558422258452;
d122 = 0.86311022453237207;
d123 = 0;

d131 = 0.84527432543442571;
d132 = 0.53433258815215101;
d133 = 0;

d211 = -0.98403013199840228;
d212 = -0.17800196436895521;
d213 = 0;

d221 = -0.66441382731888809;
d222 = 0.74736488147856317;
d223 = 0;

d231 = 0.12983973507180230;
d232 = 0.9915349934301281;
d233 = 0;

d311 = -0.76441102950503936;
d312 = -0.64472922841379376;
d313 = 0;

d321 = -0.60850011628612388;
d322 = 0.79355378423883394;
d323 = 0;

d331 = -0.6885391914692284;
d332 = 0.72519913252216561;
d333 = 0;


% Variables
% Translation and depths are a homogeneous group in each eq
%
% -------------------
% Point Equations
variable_group 
t21,
t22,
t23,

t31,
t32,
t33;

% Rotations
% try different parametrizations for rotations. Lets try standard

variable_group 
r211, r212, r213,
r221, r222, r223,
r231, r232, r233,

r311, r312, r313,
r321, r322, r323,
r331, r332, r333;

% ---------------------------------------------------------------------

% Template for view v. Substitute v for 1,2.

%%   Rvx1p1 = rv11*x1p1 + rv12*x1p2 + rv13*x1p3;
%%   Rvx1p2 = rv21*x1p1 + rv22*x1p2 + rv23*x1p3;
%%   Rvx1p3 = rv31*x1p1 + rv32*x1p2 + rv33*x1p3;
%%   
%%   % view v \in {2,3}, point p epipolar constraint
%ptfnvp = xvp1*(tv2*Rvx1p3 - tv3*Rvx1p2) + xvp2*(-tv1*Rvx1p3 + tv3*Rvx1p1) + xvp3*(-tv2*Rvx1p1 + tv1*Rvx1p2)

% TODO First, test equation for 1 point. Then copy-and-modify for remaining 2 points

R2x111 = r211*x111 + r212*x112 + r213*x113;
R2x112 = r221*x111 + r222*x112 + r223*x113;
R2x113 = r231*x111 + r232*x112 + r233*x113;

function ptfn21;
% view v, point p epipolar constraint
ptfn21 = x211*(t22*R2x113 - t23*R2x112) + x212*(-t21*R2x113 + t23*R2x111) + x213*(-t22*R2x111 + t21*R2x112);

% ---------------------------------------------------------------------
% Rotation constraints
function
rfn21,
rfn22,
rfn23,

rfn24,
rfn25,
rfn26,

rfn27,

rfn31,
rfn32,
rfn33,

rfn34,
rfn35,
rfn36,

rfn37;

% rfn{view id}{constraint id}
rfn21 = r211^2 + r221^2 + r231^2 - 1;
rfn22 = r212^2 + r222^2 + r232^2 - 1;
rfn23 = r213^2 + r223^2 + r233^2 - 1; %----
rfn24 = r211*r212 + r221*r222 + r231*r232;
rfn25 = r211*r213 + r221*r223 + r231*r233;
rfn26 = r212*r213 + r222*r223 + r232*r233; %----
rfn27 = r211*r222*r233 - r211*r223*r232 + r212*r223*r231 - r212*r221*r233 + r213*r221*r232 - r213*r231*r222 - 1;
rfn31 = r311^2 + r321^2 + r331^2 - 1; %----
rfn32 = r312^2 + r322^2 + r332^2 - 1;
rfn33 = r313^2 + r323^2 + r333^2 - 1; %----
rfn34 = r311*r312 + r321*r322 + r331*r332;
rfn35 = r311*r313 + r321*r323 + r331*r333;
rfn36 = r312*r313 + r322*r323 + r332*r333; %----
rfn37 = r311*r322*r333 - r311*r323*r332 + r312*r323*r331 - r312*r321*r333 + r313*r321*r332 - r313*r331*r322 - 1;

END;
